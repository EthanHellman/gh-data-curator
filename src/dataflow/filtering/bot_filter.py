# src/dataflow/filtering/bot_filter.py
import re
from typing import Dict, Tuple, List, Set

class BotFilter:
    """
    Filter to identify and exclude bot-generated PRs.
    
    This filter identifies PRs that are likely generated by automation systems
    rather than representing genuine human problem-solving efforts.
    """
    
    def __init__(self):
        # Bot username patterns
        self.bot_username_patterns = [
            r'bot$', r'[_-]bot', r'^bot[_-]', r'\[bot\]',
            r'dependabot', r'renovate', r'github-actions',
            r'semantic-release', r'codecov', r'travis'
        ]
        
        # Bot PR title patterns
        self.bot_title_patterns = [
            r'^(build|chore|ci|docs)(\(.*\))?:',  # Conventional commit prefixes common for automation
            r'bump|upgrade|update.*(version|dependency)',
            r'update.*\.(lock|json|yml|yaml|xml)$',
            r'dependency|version',
            r'auto(mate(d)?)?[_-]'
        ]
        
        # Bot PR body patterns
        self.bot_body_patterns = [
            r'automated pull request',
            r'automated by',
            r'this pr was automatically created',
            r'this is an automated',
            r'created by a bot',
            r'generated by'
        ]
        
        # Trivial change patterns in commit messages
        self.trivial_change_patterns = [
            r'fix typo', r'fix whitespace',
            r'update readme', r'update documentation',
            r'bump version', r'version bump'
        ]
    
    def apply(self, pr_data: Dict) -> Tuple[bool, Dict]:
        """
        Apply bot filtering rules to a PR.
        
        Returns:
            Tuple[bool, Dict]: (passed_filter, metadata)
        """
        # Default to passing the filter (not a bot)
        is_bot = False
        confidence = 0.0
        reasons = []
        
        # Check author username
        author = pr_data.get("author", "")
        if author and any(re.search(pattern, author, re.IGNORECASE) for pattern in self.bot_username_patterns):
            is_bot = True
            confidence = 1.0
            reasons.append(f"Bot username pattern match: {author}")
        
        # Check PR title
        title = pr_data.get("title", "")
        if title:
            title_matches = [
                pattern for pattern in self.bot_title_patterns 
                if re.search(pattern, title, re.IGNORECASE)
            ]
            if title_matches:
                is_bot = True
                confidence = max(confidence, 0.8)
                reasons.append(f"Bot title pattern matches: {title_matches}")
        
        # Check PR body
        body = pr_data.get("body", "")
        if body:
            body_matches = [
                pattern for pattern in self.bot_body_patterns 
                if re.search(pattern, body, re.IGNORECASE)
            ]
            if body_matches:
                is_bot = True
                confidence = max(confidence, 0.9)
                reasons.append(f"Bot body pattern matches: {body_matches}")
        
        # Check commit messages for trivial changes
        # Note: In a real implementation, we would extract commit messages from PR
        # For now, we'll check PR title and body for these patterns
        trivial_matches = []
        if title:
            trivial_matches.extend([
                pattern for pattern in self.trivial_change_patterns 
                if re.search(pattern, title, re.IGNORECASE)
            ])
        if body:
            trivial_matches.extend([
                pattern for pattern in self.trivial_change_patterns 
                if re.search(pattern, body, re.IGNORECASE)
            ])
        
        if trivial_matches:
            is_bot = True
            confidence = max(confidence, 0.7)
            reasons.append(f"Trivial change pattern matches: {trivial_matches}")
        
        # Generate metadata
        metadata = {
            "is_bot": is_bot,
            "confidence": confidence,
            "reasons": reasons
        }
        
        # Return result and metadata
        return not is_bot, metadata